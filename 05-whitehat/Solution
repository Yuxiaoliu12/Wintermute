You stumbled across an old bug bounty report from the end of 2021 related to the Polygon codebase. Understanding that other blockchains are using this code, you decide to double-check that the largest ones are not susceptible to vulnerabilities disclosed in this report.

a) Find at least two Polygon forks that could potentially be vulnerable.
b) Provide the code to check if these blockchains are safe.
c) Estimate the potential maximum loss if this attack is possible on both blockchains.

A lot of chains are built on Polygon or have some connections with Polygon. However, on Github forks, I could not find any direct forks of the Matic contracts. All forks that I examined were personal forks.
I decided to manually search for similar codes on some projects like Polymarket, SX network, Movement, etc. But I wasn't able to find the same code or even similar ones.
The only example I found with similar code was Aavegotchi. In their contracts/test/ERC20Token.sol, the following code

function transferFrom(
        address _from,
        address _to,
        uint256 _value
    ) public returns (bool success) {
        uint256 fromBalance = s.balances[_from];
        if (msg.sender == _from || s.approvedContractIndexes[msg.sender] > 0) {
            // pass
        } else {
            uint256 l_allowance = s.allowances[_from][msg.sender];
            require(l_allowance >= _value, "GHST: Not allowed to transfer");
            if (l_allowance != MAX_UINT) {
                s.allowances[_from][msg.sender] = l_allowance - _value;
                emit Approval(_from, msg.sender, l_allowance - _value);
            }
        }
        require(fromBalance >= _value, "GHST: Not enough GHST to transfer");
        s.balances[_from] = fromBalance - _value;
        s.balances[_to] += _value;
        emit Transfer(_from, _to, _value);
        success = true;
    }
is the relevant transfer function. As can be seen here, they checked the sender's balance:)

